/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.registration.model.impl;

import com.amf.registration.model.RegistrationLog;
import com.amf.registration.model.RegistrationLogModel;
import com.amf.registration.model.RegistrationLogSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RegistrationLog service. Represents a row in the &quot;Registration_RegistrationLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RegistrationLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegistrationLogImpl
 * @generated
 */
@JSON(strict = true)
public class RegistrationLogModelImpl
	extends BaseModelImpl<RegistrationLog> implements RegistrationLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registration log model instance should use the <code>RegistrationLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "Registration_RegistrationLog";

	public static final Object[][] TABLE_COLUMNS = {
		{"registrationLogId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"eventType", Types.VARCHAR},
		{"ipAddress", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("registrationLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("eventType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Registration_RegistrationLog (registrationLogId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,eventType VARCHAR(75) null,ipAddress VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Registration_RegistrationLog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY registrationLog.registrationLogId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Registration_RegistrationLog.registrationLogId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static RegistrationLog toModel(RegistrationLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RegistrationLog model = new RegistrationLogImpl();

		model.setRegistrationLogId(soapModel.getRegistrationLogId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEventType(soapModel.getEventType());
		model.setIpAddress(soapModel.getIpAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<RegistrationLog> toModels(
		RegistrationLogSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<RegistrationLog> models = new ArrayList<RegistrationLog>(
			soapModels.length);

		for (RegistrationLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RegistrationLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registrationLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegistrationLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registrationLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegistrationLog.class;
	}

	@Override
	public String getModelClassName() {
		return RegistrationLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RegistrationLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RegistrationLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegistrationLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RegistrationLog)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RegistrationLog, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RegistrationLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RegistrationLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RegistrationLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RegistrationLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RegistrationLog>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RegistrationLog.class.getClassLoader(), RegistrationLog.class,
			ModelWrapper.class);

		try {
			Constructor<RegistrationLog> constructor =
				(Constructor<RegistrationLog>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<RegistrationLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RegistrationLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RegistrationLog, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<RegistrationLog, Object>>();
		Map<String, BiConsumer<RegistrationLog, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RegistrationLog, ?>>();

		attributeGetterFunctions.put(
			"registrationLogId", RegistrationLog::getRegistrationLogId);
		attributeSetterBiConsumers.put(
			"registrationLogId",
			(BiConsumer<RegistrationLog, Long>)
				RegistrationLog::setRegistrationLogId);
		attributeGetterFunctions.put("groupId", RegistrationLog::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RegistrationLog, Long>)RegistrationLog::setGroupId);
		attributeGetterFunctions.put(
			"companyId", RegistrationLog::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RegistrationLog, Long>)RegistrationLog::setCompanyId);
		attributeGetterFunctions.put("userId", RegistrationLog::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<RegistrationLog, Long>)RegistrationLog::setUserId);
		attributeGetterFunctions.put("userName", RegistrationLog::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<RegistrationLog, String>)RegistrationLog::setUserName);
		attributeGetterFunctions.put(
			"createDate", RegistrationLog::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RegistrationLog, Date>)RegistrationLog::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RegistrationLog::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RegistrationLog, Date>)
				RegistrationLog::setModifiedDate);
		attributeGetterFunctions.put(
			"eventType", RegistrationLog::getEventType);
		attributeSetterBiConsumers.put(
			"eventType",
			(BiConsumer<RegistrationLog, String>)RegistrationLog::setEventType);
		attributeGetterFunctions.put(
			"ipAddress", RegistrationLog::getIpAddress);
		attributeSetterBiConsumers.put(
			"ipAddress",
			(BiConsumer<RegistrationLog, String>)RegistrationLog::setIpAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getRegistrationLogId() {
		return _registrationLogId;
	}

	@Override
	public void setRegistrationLogId(long registrationLogId) {
		_registrationLogId = registrationLogId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEventType() {
		if (_eventType == null) {
			return "";
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_eventType = eventType;
	}

	@JSON
	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return "";
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RegistrationLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegistrationLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RegistrationLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegistrationLogImpl registrationLogImpl = new RegistrationLogImpl();

		registrationLogImpl.setRegistrationLogId(getRegistrationLogId());
		registrationLogImpl.setGroupId(getGroupId());
		registrationLogImpl.setCompanyId(getCompanyId());
		registrationLogImpl.setUserId(getUserId());
		registrationLogImpl.setUserName(getUserName());
		registrationLogImpl.setCreateDate(getCreateDate());
		registrationLogImpl.setModifiedDate(getModifiedDate());
		registrationLogImpl.setEventType(getEventType());
		registrationLogImpl.setIpAddress(getIpAddress());

		registrationLogImpl.resetOriginalValues();

		return registrationLogImpl;
	}

	@Override
	public int compareTo(RegistrationLog registrationLog) {
		long primaryKey = registrationLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RegistrationLog)) {
			return false;
		}

		RegistrationLog registrationLog = (RegistrationLog)object;

		long primaryKey = registrationLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		RegistrationLogModelImpl registrationLogModelImpl = this;

		registrationLogModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<RegistrationLog> toCacheModel() {
		RegistrationLogCacheModel registrationLogCacheModel =
			new RegistrationLogCacheModel();

		registrationLogCacheModel.registrationLogId = getRegistrationLogId();

		registrationLogCacheModel.groupId = getGroupId();

		registrationLogCacheModel.companyId = getCompanyId();

		registrationLogCacheModel.userId = getUserId();

		registrationLogCacheModel.userName = getUserName();

		String userName = registrationLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registrationLogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registrationLogCacheModel.createDate = createDate.getTime();
		}
		else {
			registrationLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registrationLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registrationLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		registrationLogCacheModel.eventType = getEventType();

		String eventType = registrationLogCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			registrationLogCacheModel.eventType = null;
		}

		registrationLogCacheModel.ipAddress = getIpAddress();

		String ipAddress = registrationLogCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			registrationLogCacheModel.ipAddress = null;
		}

		return registrationLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RegistrationLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RegistrationLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegistrationLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RegistrationLog)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RegistrationLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RegistrationLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegistrationLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RegistrationLog)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RegistrationLog>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _registrationLogId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _eventType;
	private String _ipAddress;
	private RegistrationLog _escapedModel;

}